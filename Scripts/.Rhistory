glm_res <- glm(obs ~ group, data = dat, family = gaussian)
summary(glm_res)
confint(glm_res, level = 0.6)
head(dat)
# t test
t.test(
y1,
y2,
alternative = 'less', # one sided test (we compare the effect with an upper limit only)
mu = mu1/100*10 # the mean difference is shifted by the effect size, Î” (10 in case of honey bees)
)
# boxplot
boxplot(y2-y1, horizontal = TRUE)
abline(v=mu1/100*10, col ="tomato")
boxplot(y2-y1, horizontal = TRUE)
abline(v=mu1/100*10, col ="tomato")
mu1/100*10
ci80_treatment_effect
# set working directory
setwd("H:/Stats project - Force 20")
1700/40
32500/12
# load data ----
set.seed(123)
test_dat <- data.frame(
dose = factor(rep(c(0,1.4,3.5,7.2), each=3), ordered=TRUE),
mort = c(rbinom(3, 10, 0), rbinom(3, 10, 0.6), rbinom(3, 10, 0.61), rbinom(3, 10, 0.62)),
startN = 10
) |>
dplyr::mutate(mort_p = mort/startN,
dose = factor(dose, ordered = TRUE))
plot(mort_p ~ dose, data = test_dat)
# glm ----
glm_res <- glm(mort_p ~ dose,
family = binomial(link = "logit"),
weights = startN,
data = test_dat)
glm_res
# multiple comparisons ----
multcomp::glht(model = glm_res,
linfct = multcomp::mcp(dose ="Tukey"),
alternative = "greater") |>
summary(multcomp::adjusted("none")) |>
broom::tidy() |>
tidyr::separate_wider_delim(cols = contrast,
delim = "-",
names = c("group1","group2")
) |>
dplyr::mutate(group1 = group1 %>% trimws() %>% as.numeric(),
group2 = group2 %>% trimws() %>% as.numeric())
library(dplyr)
# multiple comparisons ----
multcomp::glht(model = glm_res,
linfct = multcomp::mcp(dose ="Tukey"),
alternative = "greater") |>
summary(multcomp::adjusted("none")) |>
broom::tidy() |>
tidyr::separate_wider_delim(cols = contrast,
delim = "-",
names = c("group1","group2")
) |>
dplyr::mutate(group1 = group1 %>% trimws() %>% as.numeric(),
group2 = group2 %>% trimws() %>% as.numeric())
# multiple comparisons ----
multcomp::glht(model = glm_res,
linfct = multcomp::mcp(dose ="Tukey")) |>
summary(multcomp::adjusted("none")) |>
broom::tidy() |>
tidyr::separate_wider_delim(cols = contrast,
delim = "-",
names = c("group1","group2")
) |>
dplyr::mutate(group1 = group1 %>% trimws() %>% as.numeric(),
group2 = group2 %>% trimws() %>% as.numeric())
0.996/2
# multiple comparisons ----
multcomp::glht(model = glm_res,
linfct = multcomp::mcp(dose ="Tukey"),
alternative = "less") |>
summary(multcomp::adjusted("none")) |>
broom::tidy() |>
tidyr::separate_wider_delim(cols = contrast,
delim = "-",
names = c("group1","group2")
) |>
dplyr::mutate(group1 = group1 %>% trimws() %>% as.numeric(),
group2 = group2 %>% trimws() %>% as.numeric())
multcomp::glht(model = glm_res,
linfct = multcomp::mcp(dose ="Tukey"),
alternative = "less") |>
summary(multcomp::adjusted("none"))
startN
glm_res
glm_res$coefficients
glm_res$converged
# glm ----
glm_res <- glm(mort_p ~ dose,
family = binomial(link = "logit"),
# weights = startN,
data = test_dat)
test_dat
glm_res <- glm(mort_p*startN ~ dose,
family = binomial(link = "logit"),
#weights = startN,
data = test_dat)
test_dat$nr <- test_dat$mort_p * test_dat$startN
glm_res <- glm(nr ~ dose,
family = binomial(link = "logit"),
#weights = startN,
data = test_dat)
glm_res <- glmer(nr ~ dose,
family = binomial(link = "logit"),
#weights = startN,
data = test_dat)
library(lme4)
glm_res <- glmer(mort_p ~ dose,
family = binomial(link = "logit"),
weights = startN,
data = test_dat)
glm_res
# glm ----
glm_res <- glm(mort_p ~ dose,
family = binomial(link = "logit"),
weights = startN,
data = test_dat)
glm_res
glm_res2 <- glmer(mort_p ~ dose,
family = binomial(link = "logit"),
weights = startN,
data = test_dat)
# multiple comparisons ----
multcomp::glht(model = glm_res2,
linfct = multcomp::mcp(dose ="Tukey"),
alternative = "less") |>
summary(multcomp::adjusted("none")) |>
broom::tidy() |>
tidyr::separate_wider_delim(cols = contrast,
delim = "-",
names = c("group1","group2")
) |>
dplyr::mutate(group1 = group1 %>% trimws() %>% as.numeric(),
group2 = group2 %>% trimws() %>% as.numeric())
glm_res2 <- glmer(mort_p ~ dose,
family = binomial(link = "logit"),
weights = startN,
data = test_dat)
glm_res2
setwd("~/GitHub/EIVmodels/Scripts")
## script setup
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# note: r version  4.3.2
# clear r environment
rm(list = ls())
# directories  ---> do not forget to set your working directory
dir.data <- "../Data/"
dir.modelruns <- "../Model runs/"
dir.jagsmodels <- "JAGS_models/"
# packages
library(dplyr)       # version 1.1.4
library(ggplot2)     # version 3.5.1
library(gridExtra)   # version 2.3
library(GGally)      # version 2.2.1
library(coda)        # version 0.19-4
library(rjags)       # version 4-15
library(R2jags)      # version 0.7-1
library(lattice)     # version 0.21-9
library(pracma)      # version 2.4.4 - for orthogonal regression using frequentist inference
library(loo)         # version 2.6.0
# for reproducibility
set.seed(124)
## read & prepare data
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# read data
df_noncens <- read.csv(file = paste0(dir.data, "dataset_1.csv"))
dim(df_noncens)
# prepare data (i.e. log transform observations)
df_noncens <- df %>%
mutate(log10_Mother = log10(Mother_concentration)) %>%
mutate(log10_Offspring = log10(Offspring_concentration))
had(df)
head(df)
# read data
df_noncens <- read.csv(file = paste0(dir.data, "dataset_1.csv"))
dim(df_noncens)
# prepare data (i.e. log transform observations)
df_noncens <- df_noncens %>%
mutate(log10_Mother = log10(Mother_concentration)) %>%
mutate(log10_Offspring = log10(Offspring_concentration))
dim(df_noncens)
# check for NA values
any(is.na(df_noncens$log10_Mother))
any(is.na(df_noncens$log10_Offspring))
## frequentist orthogonal regression (on whole dataset)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
x_obs <- df_noncens$log10_Mother
y_obs <- df_noncens$log10_Offspring
odr <- odregress(x_obs, y_obs)    # Note: cannot have NA values in x or y, make sure to remove them
FreqCoeff <- odr$coeff
FreqCoeff
# Prediction
xnew <- seq(-2, 8, by = 0.5)
ynew <- cbind(xnew, 1) %*% odr$coeff
plot(x_obs, y_obs, xlim = c(-2, 8), ylim = c(-2, 8), las = 1)
abline(a = 0, b = 1)
abline(lm(y_obs ~ x_obs), col="blue")                               # normal linear regression line in blue
points(xnew, ynew, col = "red", pch = 17)
lines(c(-2, 8), FreqCoeff[1]*c(-2, 8) +  FreqCoeff[2], col="red")   # orthogonal regression in red
## Priors
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# take the largest concentration in either offspring or mother to inform on our
# prior distributions, then remove this largest point from the dataset (i.e. do
# not use the same data point twice)
# the max value is the multiplied by 3
max_xObs <- max(df_noncens$log10_Mother, na.rm=T)
max_yObs <- max(df_noncens$log10_Offspring, na.rm=T)
if(max_xObs > max_yObs){
max <- max_xObs * 3
df_noncens <- df_noncens[-which(df_noncens$log10_Mother == max_xObs), ]
}else{
max <- max_yObs * 3
df_noncens <- df_noncens[-which(df_noncens$log10_Offspring == max_yObs),]
}
## Cross-validation
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Define sample size for k-folds over whole dataset (in our case 3 fold)
k <- 3
i <- nrow(df_noncens)
f <- as.integer(i/k) # size of a fraction
# Check if there are any data which could not be added to a fraction (i.e. the
# dataset size is not dividable by k) then, randomly select the k folds to add
# the remaining randomly selected sites
r <- i-(f*k)
i.fold <- rep(f, k)
if (r > 1){
x <- sample(1:k, r)
i.fold[x] <- i.fold[x] + 1
} else {
x <- sample(1:k, 1)
i.fold[x] <- i.fold[x] + r
}
# create vector where each fold integer is repeated i.fold times
# then, randomly sample without replacement
repeated_vector <- rep(1:k, times = i.fold)
fold.ind <- sample(repeated_vector, replace = F)
# hist(fold.ind)
# divide the data according to the random samples
fold1.df <- df_noncens[which(fold.ind==1),]
fold2.df <- df_noncens[which(fold.ind==2),]
fold3.df <- df_noncens[which(fold.ind==3),]
# Combine the folds into training and testing datasets
train1 <- rbind(fold1.df, fold2.df)
test1  <- fold3.df
train2 <- rbind(fold2.df, fold3.df)
test2  <- fold1.df
train3 <- rbind(fold1.df, fold3.df)
test3  <- fold2.df
# quick check
p1 <- ggplot(data = train1,
aes(x = log10_Mother, y = log10_Offspring)) + geom_point()
p2 <- ggplot(data = train2,
aes(x = log10_Mother, y = log10_Offspring)) + geom_point()
p3 <- ggplot(data = train3,
aes(x = log10_Mother, y = log10_Offspring)) + geom_point()
grid.arrange(p1,p2,p3)
# need to save the datasets
datasets = list(training = list(CV1= train1,
CV2 = train2,
CV3 = train3),
test = list(CV1= test1,
CV2 = test2,
CV3 = test3))
save(datasets,
file = paste0(dir.modelruns, "datasets_", Sys.Date(),".RData"))
# calculate cut off
cutoff_Y <- quantile(df_noncens$log10_Offspring, probs = 0.2)
cutoff_X <- quantile(df_noncens$log10_Mother, probs = 0.2)
p0 <- df_noncens %>%
ggplot() +
geom_point(aes(x = log10_Mother,
y = log10_Offspring)) +
scale_shape_manual(values=c(19, 4)) +
labs(x = "Mother concentration",
y = "Offspring concentration") +
theme_classic() + theme(legend.position = "none")
p0
# prepare data
df_cens1 <- df_noncens %>%
mutate(censored_Y_YN = ifelse(log10_Offspring >= cutoff_Y, 0, 1)) %>% # R variable
mutate(LOD_Y = ifelse(log10_Offspring >= cutoff_Y, -10000, cutoff_Y)) %>% # cut off value, ridiculous number otherwise
mutate(Yobs = ifelse(log10_Offspring >= cutoff_Y, log10_Offspring, NA)) # available offspring observations (NA for censored values)
# reorder the data with non censored followed by censored
data.obs <- df_cens1[which(df_cens1$censored_Y_YN == 0), ]     # subset: 411
data.mis <- df_cens1[which(df_cens1$censored_Y_YN == 1), ]      # subset: 103
df_cens1 <- rbind(data.obs, data.mis) # total: 514
p0
p1 <- df_cens1 %>%
ggplot() +
geom_point(aes(x = log10_Mother,
y = log10_Offspring,
shape = as.factor(censored_Y_YN))) +
geom_hline(aes(yintercept = cutoff_Y),
col = "#F26722", lwd = 1.2, lty = "dashed") +
scale_shape_manual(values=c(19, 4)) +
labs(x = "Mother concentration",
y = "Offspring concentration") +
theme_classic() + theme(legend.position = "none")
p1
# prepare data
df_cens2 <- df_noncens %>%
mutate(censored_X_YN = ifelse(log10_Mother >= cutoff_X, 0, 1)) %>% # R variable
mutate(LOD_X = ifelse(log10_Mother >= cutoff_X, -10000, cutoff_X)) %>% # cut off value, ridiculous number otherwise
mutate(Xobs = ifelse(log10_Mother >= cutoff_X, log10_Mother, NA)) # available offspring observations (NA for censored values)
# reorder the data with non censored followed by censored
data.obs <- df_cens2[which(df_cens2$censored_X_YN == 0), ]     # subset: 417
data.mis <- df_cens2[which(df_cens2$censored_X_YN == 1), ]      # subset: 97
df_cens2 <- rbind(data.obs, data.mis) # total: 514
p2 <- df_cens2 %>%
ggplot() +
geom_point(aes(x = log10_Mother,
y = log10_Offspring,
shape = as.factor(censored_X_YN))) +
geom_vline(aes(xintercept = cutoff_X),
col = "#F26722", lwd = 1.2, lty = "dashed") +
scale_shape_manual(values=c(19, 4)) +
labs(x = "Mother concentration",
y = "Offspring concentration") +
theme_classic() + theme(legend.position = "none")
p2
# prepare data
df_cens3 <- df_noncens %>%
# censoring in Y
mutate(censored_Y_YN = ifelse(log10_Offspring >= cutoff_Y, 0, 1)) %>% # 0 or 1 to indicate censoring
mutate(LOD_Y = ifelse(log10_Offspring >= cutoff_Y, -10000, cutoff_Y)) %>% # value of the LOD
mutate(Yobs = ifelse(log10_Offspring >= cutoff_Y, log10_Offspring, NA)) %>% # observed values
# censoring in X
mutate(censored_X_YN = ifelse(log10_Mother >= cutoff_X, 0, 1)) %>% # 0 or 1 to indicate censoring
mutate(LOD_X = ifelse(log10_Mother >= cutoff_X, -10000, cutoff_X)) %>% # value of the LOD
mutate(Xobs = ifelse(log10_Mother >= cutoff_X, log10_Mother, NA)) %>% # observed values
# identify if censoring in both directions
# mutate(censored_XandY = ifelse(censored_Y_YN + censored_X_YN == 2, 1, 0)) %>%
mutate(cens_type = case_when(log10_Mother < cutoff_X & log10_Offspring < cutoff_Y ~ "both",
log10_Mother < cutoff_X & log10_Offspring >= cutoff_Y ~ "X only",
log10_Mother >= cutoff_X & log10_Offspring < cutoff_Y ~ "Y only",
log10_Mother >= cutoff_X & log10_Offspring >= cutoff_Y ~ "none"))
# reorder the data: (1) non censored followed by censored (2) in Y, (3) in X, and (4) in Y and X
data.obs <- df_cens3[which(df_cens3$cens_type == "none"), ]
dim(data.obs)    # subset: 393
data.cen_Y <-  df_cens3[which(df_cens3$cens_type == "Y only"), ]
dim(data.cen_Y) # subset: 24
data.cen_X <-  df_cens3[which(df_cens3$cens_type == "X only"), ]
dim(data.cen_X) # subset: 18
data.cen_XY <-  df_cens3[which(df_cens3$cens_type == "both"), ]
dim(data.cen_XY) # subset: 18
df_cens3 <- rbind(data.obs, data.cen_Y, data.cen_X, data.cen_XY) # total: 514
dim(df_cens3) # total 514 rows
p3 <- df_cens3 %>%
ggplot() +
geom_point(aes(x = log10_Mother,
y = log10_Offspring,
shape = as.factor(cens_type))) +
geom_hline(aes(yintercept = cutoff_Y),
col = "#F26722", lwd = 1.2, lty = "dashed") +
geom_vline(aes(xintercept = cutoff_X),
col = "#F26722", lwd = 1.2, lty = "dashed") +
scale_shape_manual(values=c(4, 19, 4, 4)) +
labs(x = "Mother concentration",
y = "Offspring concentration") +
theme_classic() + theme(legend.position = "none")
p3
datasets_censored = list(Ycens = df_cens1,
Xcens = df_cens2,
XYcens = df_cens3)
# data organised for JAGS - posterior sampling
# for the 1st analysis, using only uncensored data
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
data_M1_CV1 <- list(xobs = train1$log10_Mother,      # xobs = mother (see DAG for naming of variables and parameters)
yobs = train1$log10_Offspring,       # yobs = Offspring
n = nrow(train1),                    # number of observations
max = max)                           # to inform on prior
data_M1_CV2 <- list(xobs = train2$log10_Mother,
yobs = train2$log10_Offspring,
n = nrow(train2),
max = max)
data_M1_CV3 <- list(xobs = train3$log10_Mother,
yobs = train3$log10_Offspring,
n = nrow(train3),
max = max)
data <- list(CV1 = data_M1_CV1,
CV2 = data_M1_CV2,
CV3 = data_M1_CV3)
View(df_cens1)
df_cens1$censored_Y_YN
n = nrow(df_cens1[which(df_cens1$censored_Y_YN == 0), ])
J = nrow(df_cens1[which(df_cens1$censored_Y_YN == 1), ])
m
n
J
nrow(dfcens1)
nrow(df_cens1)
df_cens1[which(df_cens1$censored_Y_YN == 1), ]
rep(0, nrow(df_cens1[which(df_cens1$censored_Y_YN == 1), ])
)
cut1
df_cens1[which(df_cens1$censored_Y_YN == 1), "LOD_Y"]
df_cens1$LOD_Y
# for the 1st analysis, using only uncensored data
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
data_M1_CV1 <- list(xobs = train1$log10_Mother,      # xobs = mother (see DAG for naming of variables and parameters)
yobs = train1$log10_Offspring,       # yobs = Offspring
n = nrow(train1),                    # number of observations
max = max)                           # to inform on prior
data_M1_CV2 <- list(xobs = train2$log10_Mother,
yobs = train2$log10_Offspring,
n = nrow(train2),
max = max)
data_M1_CV3 <- list(xobs = train3$log10_Mother,
yobs = train3$log10_Offspring,
n = nrow(train3),
max = max)
data <- list(CV1 = data_M1_CV1,
CV2 = data_M1_CV2,
CV3 = data_M1_CV3)
# for the 2nd analysis, including censored data
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# censoring in Y
data_Cens_Y <- list(# Y values
yobs = df_cens1[which(df_cens1$censored_Y_YN == 0), "Yobs"],  # uncensored Yobs
z1   = df_cens1[which(df_cens1$censored_Y_YN == 1), "censored_Y_YN"], # type of censoring (1 = Left censored), for censored data
cut1  = df_cens1[which(df_cens1$censored_Y_YN == 1), "LOD_Y"],  # detection limit, for censored data
# X values
xobs = df_cens1$log10_Mother, # all X values
# nr. observations
n = nrow(df_cens1[which(df_cens1$censored_Y_YN == 0), ]), # length of non censored data
c1 = nrow(df_cens1[which(df_cens1$censored_Y_YN == 1), ]),  # length of censored data
# data for prior
max = max)
# Alternative, using the dinterval() function in JAGS
data_Cens_Y_dinterval <- list(
# Y values
yobs = df_cens1$Yobs,
# X values
xobs = df_cens1$log10_Mother,
# nr. observations
n = nrow(df_cens1[which(df_cens1$censored_Y_YN == 0), ]), # length of non censored data
J = nrow(df_cens1[which(df_cens1$censored_Y_YN == 1), ]),  # length of censored data
# censoring info
R = rep(0, nrow(df_cens1[which(df_cens1$censored_Y_YN == 1), ])),     # left censoring R =0
lod = df_cens1[which(df_cens1$censored_Y_YN == 1), "LOD_Y"],
# data for prior
max = max)
# censoring in X
data_Cens_X <- list(# Y values
yobs = df_cens2$log10_Offspring,  # uncensored Yobs
# X values
xobs = df_cens2[which(df_cens2$censored_X_YN == 0), "Xobs"], # uncensored Xobs
z2   = df_cens2[which(df_cens2$censored_X_YN == 1), "censored_X_YN"], # type of censoring (1 = Left censored), for censored data
cut2 = df_cens2[which(df_cens2$censored_X_YN == 1), "LOD_X"],  # detection limit, for censored data
# nr. observations
n = nrow(df_cens2[which(df_cens2$censored_X_YN == 0), ]), # length of non censored data
c2 = nrow(df_cens2[which(df_cens2$censored_X_YN == 1), ]),  # length of censored data in X direction
# data for prior
max = max)
# censoring in Y and X
data_Cens_YandX <- list(
n = nrow(df_cens3[which(df_cens3$cens_type == "none"), ]), # length of non-censored data
c1 = nrow(df_cens3[which(df_cens3$cens_type == "Y only"), ]), # length of data censored in Y
c2 = nrow(df_cens3[which(df_cens3$cens_type == "X only"), ]), # length of data censored in X
c3 = nrow(df_cens3[which(df_cens3$cens_type == "both"), ]), # length of completely censored data
# observations - continuous variable
yobs = df_cens3[which(df_cens3$cens_type != "both"), "Yobs"],  # uncensored Yobs
xobs = df_cens3[which(df_cens3$cens_type != "both"), "Xobs"], # uncensored Xobs
# observations - binary variable
z1 = df_cens3[which(df_cens3$cens_type ==  "Y only"), "censored_Y_YN"], # type of censoring (1 = Left censored), for censored data
z2 = df_cens3[which(df_cens3$cens_type ==  "X only"), "censored_X_YN"],
z3 = df_cens3[which(df_cens3$cens_type ==  "both"), "censored_Y_YN"],
z4 = df_cens3[which(df_cens3$cens_type ==  "both"), "censored_X_YN"],
# detection limits (i.e. censoring cutoffs)
cut1 = df_cens3[which(df_cens3$cens_type ==  "Y only"), "LOD_Y"],  # detection limit, for censored data
cut2 = df_cens3[which(df_cens3$cens_type ==  "X only"), "LOD_X"],
cut3 = df_cens3[which(df_cens3$cens_type ==  "both"), "LOD_Y"],
cut4 = df_cens3[which(df_cens3$cens_type ==  "both"), "LOD_X"],
# data for prior
max = max)
## Define model
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# models for uncensored data ~~~~~~~~~~~~~~~
# full, 6 parameter model
modelM1a <- "M1a.txt"
parametersM1a <- c("a", "b", "mu_x", "tau_x", "tau_y", "tau_u") # mu_x and tau_x are the population level params
# reduced, 5 parameter model (equal variance on Xobsi and Xi)
modelM1b <- "M1b.txt"
parametersM1b <- c("a", "b", "mu_x", "tau_x", "tau")
# models for uncensored data ~~~~~~~~~~~~~~~
# full, 6 parameter model
modelM1a <- "M1a.txt"
parametersM1a <- c("a", "b", "mu_x", "tau_x", "tau_y", "tau_u") # mu_x and tau_x are the population level params
# reduced, 5 parameter model (equal variance on Xobsi and Xi)
modelM1b <- "M1b.txt"
parametersM1b <- c("a", "b", "mu_x", "tau_x", "tau")
# reduced, 4 parameter model (fixed intercept)
modelM1c <- "M1c.txt"
parametersM1c <- c("a", "mu_x", "tau_x", "tau")
# model incl. censored data ~~~~~~~~~~~~~~~
# reduced, 5 parameter model for censored data
modelM1b_cens_Y <- "M1b - censored_Y.txt" # cens in Y
modelM1b <- "M1b - censored_Y_dinterval.txt" # Alternative: using dinterval() function in JAGS
parametersM1b <- c("a", "b", "mu_x", "tau_x", "tau")
modelM1b_cens_X <- "M1b - censored_X.txt" # cens in X
modelM1b_cens_YandX <- "M1b - censored_XY.txt" # cens in X
parametersM1b <- c("a", "b", "mu_x", "tau_x", "tau")
# settings
n_chains   <- 3
